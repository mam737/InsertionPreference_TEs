/// Model 1 - Munasinghe, Springer, and Brandvain 2022
/// Genome Architecture - Single Chromosome w/ Low Recombination
/// TE Biology - No Excision + No Non-Autonomous Elements   
/// Last Update - 04.11.2022


// Check if output value is null - because there are no mutations of that class present
// if it is, set value = 0.0 so that class gets outputted
function (fi)check_null(Nif x) {
	if (!size(x)) {
		x = 0.0;
	}
	return (x);
}

// To track relevant trajectores, we store values of interest
// so they can be outputted at the end
// we only output trajectories for population extinction + dual survival outcomes
function (lifso)obtain_rel_values(void) {
	generation = sim.generation;
	allIndividuals = sim.subpopulations.individuals; 
	pop_size = length(allIndividuals);
	
	// Fitness here is of the individual calculated before the proliferation of active TEs
	// This is correct, because the proliferation is done solely as a form of gametogenesis
	// i.e., the proliferation is what's passed on to offspring, but does not impact parent fitness
	p1_mean_fit = mean(p1.cachedFitness(NULL));
	
	mean_cn_m1 = check_null(mean(allIndividuals.countOfMutationsOfType(m1)));
	var_cn_m1 = check_null(var(allIndividuals.countOfMutationsOfType(m1)));
	mean_freq_m1 = check_null(mean(sim.mutationFrequencies(NULL,sim.mutationsOfType(m1))));
	var_freq_m1 = check_null(var(sim.mutationFrequencies(NULL,sim.mutationsOfType(m1))));
	
	mean_cn_m2 = check_null(mean(allIndividuals.countOfMutationsOfType(m2)));
	var_cn_m2 = check_null(var(allIndividuals.countOfMutationsOfType(m2)));
	mean_freq_m2 = check_null(mean(sim.mutationFrequencies(NULL,sim.mutationsOfType(m2))));
	var_freq_m2 = check_null(var(sim.mutationFrequencies(NULL,sim.mutationsOfType(m2))));
	
	mean_cn_m3 = check_null(mean(allIndividuals.countOfMutationsOfType(m3)));
	var_cn_m3 = check_null(var(allIndividuals.countOfMutationsOfType(m3)));
	mean_freq_m3 = check_null(mean(sim.mutationFrequencies(NULL,sim.mutationsOfType(m3))));
	var_freq_m3 = check_null(var(sim.mutationFrequencies(NULL,sim.mutationsOfType(m3))));

	mean_cn_m4 = check_null(mean(allIndividuals.countOfMutationsOfType(m4)));
	var_cn_m4 = check_null(var(allIndividuals.countOfMutationsOfType(m4)));
	mean_freq_m4 = check_null(mean(sim.mutationFrequencies(NULL,sim.mutationsOfType(m4))));
	var_freq_m4 = check_null(var(sim.mutationFrequencies(NULL,sim.mutationsOfType(m4))));
	
	rel_values =  c(generation, pop_size, p1_mean_fit, 
	mean_cn_m1, var_cn_m1, mean_freq_m1, var_freq_m1, 
	mean_cn_m2, var_cn_m2, mean_freq_m2, var_freq_m2, 
	mean_cn_m3, var_cn_m3, mean_freq_m3, var_freq_m3, 
	mean_cn_m4, var_cn_m4, mean_freq_m4, var_freq_m4);
	return(rel_values);
}


// For any runs that result in population extinction or dual survival,
// output all relevant trajectories
function (void)output_success_run(void) {
// Need to get filenames
	OutputTraject_filename = 'Rep' + asString(sim.getValue('BioRepID')) + '_' + sim.getValue('outfile_header');
	//catn(OutputTraject_filename);
	final_rel_trajects = sim.getValue('init_rel_trajects');
	
	for (i in 0:((length(final_rel_trajects)/19)-1)) {
		pos_start = 19*i;
		pos_end = (19*i) + 18;
		gen_output = final_rel_trajects[pos_start:pos_end];
		line = paste(gen_output,sep='\t');
		writeFile(OutputTraject_filename,line,append=T);
	}
}

// Function to Restart Simulation By Looping Back to the Beginning 
// i.e., we're starting another replicate for this param combo
// If sufficient end states are met, end simulation
function (void)restart_sim(string x) {
	if (x=='EXT') {
		sim.setValue('ext_restarts',sim.getValue('ext_restarts') + 1);
		last_stored_traject = sim.getValue('last_traject');
		sim.setValue('init_rel_trajects',c(sim.getValue('init_rel_trajects'),last_stored_traject));
		//Output simulation state, clear rel. values
		output_success_run();
		sim.setValue('init_rel_trajects',c());
		sim.setValue('last_traject',c());
		sim.setValue('BioRepID',sim.getValue('BioRepID') + 1);
	}
	
	if (x=='MAINT') {
		sim.setValue('maint_restarts',sim.getValue('maint_restarts') + 1);
		last_stored_traject = sim.getValue('last_traject');
		sim.setValue('init_rel_trajects',c(sim.getValue('init_rel_trajects'),last_stored_traject));
		//Output simulation state, clear rel. values
		output_success_run();
		sim.setValue('init_rel_trajects',c());
		sim.setValue('last_traject',c());
		sim.setValue('BioRepID',sim.getValue('BioRepID') + 1);
	}
	
	if (x=='LOST') {
		current_RepID = sim.getValue('RUNID');
		current_gen = sim.generation;
		line = current_RepID + '\t' + current_gen;
		//catn(line);
		LostTE_filename = "LostTE_" + sim.getValue('outfile_header');
		writeFile(LostTE_filename,line,append=T);
		sim.setValue('lost_tes',sim.getValue('lost_tes')+1);
		sim.setValue('init_rel_trajects',c());
		sim.setValue('last_traject',c());		
	}
	
	//Check to see if we restart or if we "end" the simulation
	current_ext_number = sim.getValue('ext_restarts');
	current_maint_number = sim.getValue('maint_restarts');
	current_lost_tes_number = sim.getValue('lost_tes');
	
	// If we have 100 "Biological Replicates" (Extinction Events + Dual Survival Events)
	// Output LogFile + Terminate Simulation
	if (current_ext_number + current_maint_number == 100) {
		LogFile_filename = 'LogFile_' + outfile_header;
	
	
		line = 'Total # of Runs: ' + asString(sim.getValue('RUNID'));
		writeFile(LogFile_filename,line,append=T);
		
		line = 'Total # of TE Loss: ' + asString(sim.getValue('lost_tes'));
		writeFile(LogFile_filename,line,append=T);
		
		line = 'Total # of Ext Events: ' + asString(sim.getValue('ext_restarts'));
		writeFile(LogFile_filename,line,append=T);
		
		line = 'Total # of Maint Events: ' + asString(sim.getValue('maint_restarts'));
		writeFile(LogFile_filename,line,append=T);
		
		line = 'Elapsed: ' +(clock()-sim.getValue('start'));
		writeFile(LogFile_filename,line,append=T);
		sim.simulationFinished();
	}
	
	// If the TE Family is lost 1 million times
	// Output LogFile + Terminate Simulation
	if (current_lost_tes_number == 1e6) {
		LogFile_filename = 'LogFile_' + outfile_header;
	
		line = 'Total # of Runs: ' + asString(sim.getValue('RUNID'));
		writeFile(LogFile_filename,line,append=T);
		
		line = 'Total # of TE Loss: ' + asString(sim.getValue('lost_tes'));
		writeFile(LogFile_filename,line,append=T);
		
		line = 'Total # of Ext Events: ' + asString(sim.getValue('ext_restarts'));
		writeFile(LogFile_filename,line,append=T);
		
		line = 'Total # of Maint Events: ' + asString(sim.getValue('maint_restarts'));
		writeFile(LogFile_filename,line,append=T);
		
		line = 'Elapsed: ' +(clock()-sim.getValue('start'));
		writeFile(LogFile_filename,line,append=T);
		sim.simulationFinished();
	}
	
	//If neither of these conditions is met,
	// loop back to the save state + restart SIM
	sim.setValue('RUNID',sim.getValue('RUNID') + 1);
	sim.readFromPopulationFile("/tmp/slim_" + simID + ".txt");
   setSeed(getSeed() + 1); // Get new replicate by changing the seed	
}

initialize() {
	initializeSLiMModelType("nonWF");
	
	// Static Parameters of Interest
	defineConstant('L',1e5); // 1 Chromosome with 1e5 sites
	defineConstant('r',1e-8); // Recombination Rate
	defineConstant('K',1000); // Hard Carrying Capacity
	
	// Variable Parameters of Interest
	//defineConstant('teJumpP',1e-5);
	//defineConstant('neutP',0.001);
	
	//Define Mutation Types
	
	//Neutral Active TE
	initializeMutationType('m1',0.5,'f',0.0);
	m1.convertToSubstitution = F;
	m1.color = 'lightblue';
	
	//Mini-Deleterious Active TE
	initializeMutationType('m2',0.5,'f',-0.005);
	m2.convertToSubstitution = F;
	m2.color = 'yellow';	

	//Modest-Deleterious Active TE
	initializeMutationType('m3',0.5,'f',-0.05);
	m3.convertToSubstitution = F;
	m3.color = 'orange';
	
	//Massive-Deleterious Active TE
	initializeMutationType('m4',0.5,'f',-0.5);
	m4.convertToSubstitution = F;
	m4.color = 'red';
	
  	initializeGenomicElementType('g1',c(m1,m2,m3,m4), c(1.0,1.0,1.0,1.0));

  	initializeGenomicElement(g1,0,L-1);
  	
  	// Assign parts of the genome as neut(m1)/mini-del(m2)/mod-del(m3)/mass-del(m4)
	genome_positions = seq(0,L-1);
	// Neut Sites = L * neutP
	defineConstant('neut_sites',sort(sample(genome_positions,asInteger(neutP*L),replace=F)));
	// Total Del Sites = L - (L*neutP) = D
	del_sites = setDifference(genome_positions,neut_sites);
	// Mini-Del Sites = D/3
	defineConstant('mini_sites',sort(sample(del_sites,asInteger(length(del_sites)/3),replace=F)));
	rem_del_sites = setDifference(del_sites,mini_sites);
	// Mod-Del Sites = D/3
	defineConstant('mod_sites',sort(sample(rem_del_sites,asInteger(length(del_sites)/3),replace=F)));
	// Mass-Del Sites = D/3
  	defineConstant('mass_sites',sort(setDifference(rem_del_sites,mod_sites)));
  	
  	//No Mutation Rate as Things Spread Only Via Jumping
  	initializeMutationRate(0.0);
  	initializeRecombinationRate(r);
  	
  	defineConstant('outfile_header','teJumpP=' + asString(teJumpP) + '_neutP=' + asString(neutP) + '.txt');
  	LostTE_filename = "LostTE_" + outfile_header;
  	line = paste(c('RepID','Gen'),sep='\t');
  	writeFile(LostTE_filename,line,append=T);
}

// Generate 2x the number of offspring as individuals present
// Parents are chosen randomly
reproduction() {
	inds = sim.subpopulations.individuals;
	// make double the current pop size worth of offspring
	total_offspring_generated = 2*length(inds);
	
	for (i in seqLen(total_offspring_generated)) {
		parent_1 = sample(inds,1);
		parent_2 = sample(inds,1);
		p1.addCrossed(parent_1,parent_2);
	}
	self.active = 0;
}

// create an initial population of 1000 individuals
1 early() {	
	defineConstant("simID", getSeed());
	sim.setValue('outfile_header','teJumpP=' + asString(teJumpP) + '_neutP=' + asString(neutP) + '.txt');
	sim.setValue('start',clock());
	sim.addSubpop("p1", K);	
}

// Enforce Discrete, Non-Overlapping Generations
// Enforce Hard Carrying Capacity By Random Culling
early()
{
	// Remove parental generation - to get discrete, non-overlapping generations
	inds = sim.subpopulations.individuals;
	inds[inds.age > 0].fitnessScaling = 0.0;
	
	//hard carrying capacity by random culling
	off = inds[inds.age == 0]; //offspring
	N = length(off); //total number of offspring
	indices = which(inds.age == 0); //indices of offspring
	if (N > K) { //if more than K...
		inds[sample(indices, N-K)].fitnessScaling = 0.0; //...kill a random subset to reduce N to K
		off = inds[inds.fitnessScaling > 0]; //get surviving offspring
	}	
}

// Add TE Mutation + Save Sim State
// Just do a small gen delay - this may not be necessary, but just do a small burn-in without any TEs or mutations
5 late () {
	// @Gen 5, save this - we will come back to this if sim needs to restart
	sim.setValue('init_rel_trajects',c());
	sim.setValue('last_traject',c());
	sim.setValue('RUNID',1); //ID for all runs, update each restart
	sim.setValue('BioRepID',1); //ID for ext + maint runs, update when you restart for those reasons
	sim.setValue('lost_tes',0);
	sim.setValue('ext_restarts',0);
	sim.setValue('maint_restarts',0);
	
	// Add a neutral TE at a random position
	target = sample(p1.genomes, 1);
 	target.addNewDrawnMutation(m1, sample(neut_sites,1));
	
	// save the initialized state where we add a TE into the population @ freq 1/2K
	sim.outputFull("/tmp/slim_" + simID + ".txt");
}

// Three Possible Outputs
// (1) Host Population Extinction
// (2) TE Loss from the Population
// (3) Dual Survival of Both TE Lineage + Host Pop
// Check Each Gen to See if Any End State Achieved
// If so, record it + (potentially) loop back to initial TE introduction to start another run
5:50000 late () {    
	// If Pop Size = 0, extinction occurred, note and restart
	if (sum(sim.subpopulations.individualCount) == 0) {
		cat('Run ' + asString(sim.getValue('RUNID')) + ': EXTINCTION, NOTED + RESTARTED...\n');
		restart_sim('EXT');
	}
	
	// Check to see if there are no more TEs
   // If no more active TEs, note and restart
   if (size(sim.mutations)==0) {
   	cat('Run ' + asString(sim.getValue('RUNID')) + ': TE FAMILY LOST, NOTED + RESTARTED...\n');
   	restart_sim('LOST');
   } 	
	
	// If Pop Survived to Last Gen, note and restart
   if (sim.generation==50000) {
   	cat('Run ' + asString(sim.getValue('RUNID')) + ': SURVIVED TO FINAL GEN, NOTED + RESTARTED...\n');
   	restart_sim('MAINT');
   }   
}

// Every 20 Gens Save Trajectory of Relevant Values to List
late () {
	current_traject = obtain_rel_values();
	sim.setValue('last_traject',current_traject);
	if (sim.generation % 20 == 0) {
		sim.setValue('init_rel_trajects',c(sim.getValue('init_rel_trajects'),current_traject));
	}
}

// Mimic Jumping of TEs during gametogenesis by Having active TEs jump here
// NOTE: TE proliferation WILL NOT influence the fitness of the individual
// Fitness is calculated before late events, the expansion here is not supposed to change the fitness of the individual
// instead, it is going to change what is passed to offspring
late() {
	for (individual in sim.subpopulations.individuals) {
		// Pull + Count All TEs Present in Individual
		ind_tes = individual.genomes.mutations;
		ind_tes_count = size(ind_tes);
		
		// Determine How Many of Present TEs Jump
		if (ind_tes_count * teJumpP !=0) {
			ind_jumpCount = rpois(1,asFloat(ind_tes_count*teJumpP));
		} else {
			ind_jumpCount = 0.0;
		}
		
		// Manage Insertion of Jumping TEs
		if (ind_jumpCount > 0.0 & ind_tes_count > 0) {
			// Randomly choose a TE 
			jumpTEs_ind = sample(ind_tes,min(ind_jumpCount, ind_tes_count));
			for (te in jumpTEs_ind) {
				// Randomly choose which genome the TE will insert on to
				if (runif(1,0,10) > 0.5) {
					ind_gen = individual.genomes[0];
				} else {
					ind_gen = individual.genomes[1];
				}
				
				// Randomly choose position,
				// position determines fitness effect of TE insertion
				pos = rdunif(1,0,L-1);
				if (size(setIntersection(neut_sites, pos))) {
					mut = ind_gen.addNewDrawnMutation(m1,pos);
				} else if (size(setIntersection(mini_sites, pos))) {
					mut = ind_gen.addNewDrawnMutation(m2,pos);
				} else if (size(setIntersection(mod_sites, pos))) {
					mut = ind_gen.addNewDrawnMutation(m3,pos);
				} else {
					mut = ind_gen.addNewDrawnMutation(m4,pos);
				}						
			}
		}
	}
}
